kube-prometheus-stack:
  enabled: true
  
  # Prometheus Configuration
  prometheus:
    service:
      type: NodePort
      port: 9090
      nodePort: 30381
    prometheusSpec:
      serviceMonitorSelector:
        matchLabels:
          release: prometheus
      additionalScrapeConfigs:
        - job_name: 'jenkins'
          metrics_path: /prometheus
          static_configs:
            - targets: ['15.206.0.203:8080']

  # Grafana Configuration
  grafana:
    enabled: true
    service:
      type: LoadBalancer
      port: 3000
      nodePort: 30008
    adminUser: "gfadmin"
    adminPassword: "admin123"
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
          - name: Prometheus
            type: prometheus
            access: proxy
            url: http://prometheus-operated:9090
            isDefault: true

  # Node Exporter Configuration
  nodeExporter:
    enabled: true

# RBAC Configuration
rbac:
  create: true

# Node exporter is now handled by the operator

######################################################################################################
# prometheus:
#   image:
#     repository: prom/prometheus
#     tag: latest
#   service:
#     type: NodePort   # ClusterIP exposes the service internally within the cluster only.
#     port: 9090
#     nodePort: 30381      # External port to access Prometheus
#   jenkins:
#     host: 15.206.0.203
#     port: 8080
#   netflix:
#     host: "netflix-service.netflix.svc.cluster.local"
#     port: 3000


# node-exporter:          # node_exporter always listens on port 9100 by default.
#   image:
#     repository: prom/node-exporter
#     tag: latest

   
# grafana:
#   image:
#     repository: grafana/grafana
#     tag: latest
#   service:
#     type: LoadBalancer
#     port: 3000         # Service port
#     targetPort: 3000   # Pod/container port
#     nodePort: 30008    # Exposed node port (must be in range 30000-32767)
#   admin:                # These are the default login credentials used to access Grafanaâ€™s web UI.
#     user: gfadmin
#     password: admin123
#   datasources:
#     datasources.yaml:
#       apiVersion: 1
#       datasources:
#         - name: Prometheus
#           type: prometheus
#           access: proxy
#           url: http://prometheus.monitoring.svc.cluster.local:9090
#           isDefault: true

# rbac:             # This tells Helm to generate RBAC (Role-Based Access Control) resources (like Roles, RoleBindings, and ServiceAccounts) for the components I'm deploying.
#   create: true
  
# # RBAC regulates resource access based on the roles assigned to individual users within an organization.
# # In Kubernetes, RBAC allows you to define fine-grained permissions for users and service accounts,
# # specifying which resources they can access and what actions they can perform on those resources.